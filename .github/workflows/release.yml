name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      pkg_ver: ${{ steps.get_version.outputs.pkg_ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pkg_ver=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

  build:
    name: Build
    needs: ['create-release']
    env:
      VERSION: ${{needs.create-release.outputs.version}}
      PKG_VER: ${{needs.create-release.outputs.pkg_ver}}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: patlab
            asset_name: patlab-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: patlab
            asset_name: patlab-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: patlab.exe
            asset_name: patlab-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: patlab
            asset_name: patlab-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: patlab
            asset_name: patlab-macos-arm64
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Runner Architecture
        run: |
          echo "RUSTC_HOST_ARCH=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_ENV
        shell: bash

      - name: Print Runner Architecture
        run: echo "$RUSTC_HOST_ARCH"
        shell: bash

      - name: Check Version env
        run: |
          if [ "$PKG_VER" == "" ]; then
            exit 1
          fi
          if [ "$VERSION" == "" ]; then
            exit 1
          fi
        shell: bash

      - name: Build (with cross if needed)
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" && "${{ matrix.target }}" != "$RUSTC_HOST_ARCH" ]]; then
            echo "Installing cross for cross-compilation"
            cargo install cross
            echo "Building with cross"
            cross build --release --target ${{ matrix.target }}
          else
            echo "Building with cargo"
            cargo build --release --target ${{ matrix.target }}
          fi
      
      - name: Rename artifacts
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
            chmod +x ${{ matrix.asset_name }}
          fi

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.create-release.outputs.version }}
          files: ${{ matrix.asset_name }}